{"remainingRequest":"D:\\dashboard-vuejs-and-tailwindcss\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\dashboard-vuejs-and-tailwindcss\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\dashboard-vuejs-and-tailwindcss\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dashboard-vuejs-and-tailwindcss\\src\\components\\base\\Level.vue?vue&type=template&id=2ea23c94&scoped=true&","dependencies":[{"path":"D:\\dashboard-vuejs-and-tailwindcss\\src\\components\\base\\Level.vue","mtime":1610141566000},{"path":"D:\\dashboard-vuejs-and-tailwindcss\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\dashboard-vuejs-and-tailwindcss\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\dashboard-vuejs-and-tailwindcss\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\dashboard-vuejs-and-tailwindcss\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm14LTEwIHB4LTgiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncmlkIGdyaWQtY29scy00IGdhcC00IG10LTYgbWItMTIiIH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAicHgtNCByb3VuZGVkLW1kIGJnLXdoaXRlIHNoYWRvdy1tZCBib3JkZXItYi0yIGJvcmRlci15ZWxsb3ctNTAwIgogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm15LTIgZmxleCBqdXN0aWZ5LWJldHdlZW4gaXRlbXMtY2VudGVyIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtbGciIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWdyYXktNzAwIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3RzIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJQIiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWdyYXktNjAwIHRleHQtcmlnaHQiIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJhbmltYXRlZC1udW1iZXIiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogImxpbmVhciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMTM0NSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlOiBfdm0uZm9ybWF0bnVtLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDQwMDAKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgInB4LTQgcm91bmRlZC1tZCBiZy13aGl0ZSBzaGFkb3ctbWQgYm9yZGVyLWItMiBib3JkZXItaW5kaWdvLTcwMCIKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJteS0yIGZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlciIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWxnIiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1ncmF5LTcwMCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJPcmRlcnMiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgIlAiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtZ3JheS02MDAgdGV4dC1yaWdodCIgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImFuaW1hdGVkLW51bWJlciIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiAibGluZWFyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAyNTk1LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWU6IF92bS5mb3JtYXRudW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNDAwMAogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAicHgtNCByb3VuZGVkLW1kIGJnLXdoaXRlIHNoYWRvdy1tZCBib3JkZXItYi0yIGJvcmRlci1ibHVlLTYwMCIKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJteS0yIGZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlciIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX20oMiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWxnIiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1ncmF5LTcwMCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBdmVyYWdlIFByaWNlIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJQIiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWdyYXktNjAwIHRleHQtcmlnaHQiIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJhbmltYXRlZC1udW1iZXIiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogImxpbmVhciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMjEyOTUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZTogX3ZtLmZvcm1hdFRvUHJpY2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNDAwMAogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAicHgtNCByb3VuZGVkLW1kIGJnLXdoaXRlIHNoYWRvdy1tZCBib3JkZXItYi0yIGJvcmRlci1ncmVlbi00MDAiCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibXktMiBmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1sZyIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtZ3JheS03MDAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUmV2ZW51ZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiUCIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1ncmF5LTYwMCB0ZXh0LXJpZ2h0IiB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiYW5pbWF0ZWQtbnVtYmVyIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6ICJsaW5lYXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDI1NDk1LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWU6IF92bS5mb3JtYXRUb1ByaWNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDQwMDAKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2hhcnRzIG15LTggZ3JpZCBncmlkLWNvbHMtMiBnYXAtNCIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmctd2hpdGUgc2hhZG93LWxnIHJvdW5kZWQteGwgcC0yIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIzMDAiLAogICAgICAgICAgICAgICAgdHlwZTogImRvbnV0IiwKICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5vcHRpb25zLAogICAgICAgICAgICAgICAgc2VyaWVzOiBfdm0uc2VyaWVzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmctd2hpdGUgc2hhZG93LWxnIHJvdW5kZWQteGwgcC0yIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIzMDAiLAogICAgICAgICAgICAgICAgdHlwZTogImxpbmUiLAogICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLm9wdGlvbnMsCiAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS5zZXJpZXMyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmctd2hpdGUgc2hhZG93LWxnIHJvdW5kZWQteGwgcC0yIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiYXBleGNoYXJ0IiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIzMDAiLAogICAgICAgICAgICAgICAgdHlwZTogImJhciIsCiAgICAgICAgICAgICAgICBvcHRpb25zOiBfdm0ub3B0aW9uc2JhciwKICAgICAgICAgICAgICAgIHNlcmllczogX3ZtLnNlcmllc2JhcgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImJnLXdoaXRlIHNoYWRvdy1sZyByb3VuZGVkLXhsIHAtMiIgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImFwZXhjaGFydCIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdHlwZTogImFyZWEiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMzAwIiwKICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5jaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICBzZXJpZXM6IF92bS5zZXJpZXNhcmVhCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm15LTggYmctd2hpdGUgcm91bmRlZC1sZyIgfSwgWwogICAgICAgIF92bS5fbSg0KSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInB5LTQgcHgtOCIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ0YWJsZSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICJ0YWJsZS1yZXNwb25zaXZlLWZ1bGwgc29ydC10YWJsZSAgcm91bmRlZC1sZyAgYmctd2hpdGUgbGc6dy1mdWxsIgogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl9tKDUpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInRib2R5IiwKICAgICAgICAgICAgICAgIF92bS5fbChfdm0ud29ya2VycywgZnVuY3Rpb24od29ya2VyLCBpbmRleCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoInRyIiwgeyBrZXk6IGluZGV4IH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ3LTEyIGgtMTIgcHktNiBmbGV4IGl0ZW1zLWNlbnRlciIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInctZnVsbCByb3VuZGVkLWZ1bGwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiB3b3JrZXIuYXZhdGFyIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNDbGFzczogInRleHQtZ3JheS04MDAgcHktNiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KF92bS5fcyh3b3JrZXIubmFtZSkpXSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1ncmF5LTgwMCBweS02IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoX3ZtLl9zKHdvcmtlci5DYXRlZ29yeSkpXSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1ncmF5LTgwMCBweS02IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoX3ZtLl9zKHdvcmtlci5EZXNpZ25hdGlvbikpXSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJ0ZCIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1ncmF5LTgwMCBweS02IiB9LAogICAgICAgICAgICAgICAgICAgICAgW19jKCJQIiwgW192bS5fdihfdm0uX3Mod29ya2VyLkhvdXIpKV0pXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIHB5LTYiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlci5Qcm9ncmVzcyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIHJvdW5kZWQtbWQgcC0wLjUgdy0yLzMgdGV4dC1jZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKHdvcmtlci5Qcm9ncmVzcykpXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctMTIgaC0xMiIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAidy1mdWxsIGgtZnVsbCIsCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9nbG9iZS5zdmciKSwgYWx0OiAiIiB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctMTIgaC0xMiIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAidy1mdWxsIGgtZnVsbCIsCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9zdG9wd2F0Y2guc3ZnIiksIGFsdDogIiIgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3LTEyIGgtMTIiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogInctZnVsbCBoLWZ1bGwiLAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvY2hlY2tlZC5zdmciKSwgYWx0OiAiIiB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctMTIgaC0xMiIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAidy1mdWxsIGgtZnVsbCIsCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9jb2lucy5zdmciKSwgYWx0OiAiIiB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInB5LTggcHgtNCIgfSwgWwogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXhsIiB9LCBbX3ZtLl92KCJXb3JrZXIgTGlzdCIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ0aGVhZCIsIFsKICAgICAgX2MoInRyIiwgeyBzdGF0aWNDbGFzczogImJvcmRlci0wIiB9LCBbCiAgICAgICAgX2MoInRoIiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJweS0yIHRleHQtbGVmdCB0ZXh0LWJhc2UgZm9udC1ub3JtYWwgZm9udC1zZW1pYm9sZCIKICAgICAgICB9KSwKICAgICAgICBfYygKICAgICAgICAgICJ0aCIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHktMiB0ZXh0LWxlZnQgdGV4dC1iYXNlIGZvbnQtbm9ybWFsIGZvbnQtc2VtaWJvbGQiIH0sCiAgICAgICAgICBbX3ZtLl92KCJXb3JrZXIiKV0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgInRoIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJweS0yIHRleHQtbGVmdCB0ZXh0LWJhc2UgZm9udC1ub3JtYWwgZm9udC1zZW1pYm9sZCIgfSwKICAgICAgICAgIFtfdm0uX3YoIkNhdGVnb3J5IildCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJ0aCIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHktMiB0ZXh0LWxlZnQgdGV4dC1iYXNlIGZvbnQtbm9ybWFsIGZvbnQtc2VtaWJvbGQiIH0sCiAgICAgICAgICBbX3ZtLl92KCJEZXNpZ25hdGlvbiIpXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAidGgiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogInB5LTIgdGV4dC1sZWZ0IHRleHQtYmFzZSBmb250LW5vcm1hbCBmb250LXNlbWlib2xkIiB9LAogICAgICAgICAgW192bS5fdigiV29ya2luZyBIb3VyIildCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJ0aCIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHktMiB0ZXh0LWxlZnQgdGV4dC1iYXNlIGZvbnQtbm9ybWFsIGZvbnQtc2VtaWJvbGQiIH0sCiAgICAgICAgICBbX3ZtLl92KCJQcm9ncmVzcyIpXQogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}